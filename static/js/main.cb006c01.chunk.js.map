{"version":3,"sources":["hooks/userHooks.js","components/Header.js","components/DayCard.js","components/WeekPicker.js","components/User.js","components/MealForm.js","components/Chef.js","serviceWorker.js","components/Login.js","components/SignUp.js","index.js","stores.js","static/readyplate.png","static/profilepic.png"],"names":["getUser","a","meals","firebase","database","ref","once","then","snapshot","val","useUser","useState","user","setUser","loaded","useRef","useEffect","current","fetchedUser","getAndSetUser","Header","window","location","href","includes","Navbar","bg","expand","Brand","Image","src","require","alt","width","height","Toggle","aria-controls","Collapse","id","Nav","className","Link","DropdownButton","variant","title","Dropdown","Item","disabled","getMeals","cardGroup","cardDate","DayCard","setMeals","fetchedMeals","getAndSetMeals","useMeals","Card","Body","Title","Date","split","toDateString","Text","Jumbotron","Button","console","log","eventkey","Accordion","Object","entries","map","meal","as","eventKey","ListGroup","item","class","hidden","parseInt","toString","date","WeekPicker","initialSettings","startDate","getMonth","getDate","getFullYear","type","getDates","cardUser","group","User","cardDates","dates","setDates","fetchedDates","getAndSetDate","useDates","keys","Container","Row","Col","xl","sm","MealForm","formValues","setFormValues","updateFormValues","updateObject","mealEntryCount","setMealEntryCount","getHandleFieldChange","index","event","fieldIndex","newValue","target","value","mealFormItems","Array","fill","Form","Group","controlId","Label","Control","placeholder","onChange","handleFormSubmit","cleanedValues","formInput","foodItems","name","set","writeMealData","muted","ButtonGroup","onClick","size","block","reload","Chef","mealCreation","setMealCreation","style","display","justifyContent","Boolean","hostname","match","Login","fluid","s","xs","backgroundColor","marginTop","flex","undefined","paddingTop","SignUp","padding","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.cb006c01.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\n\nlet getUser = async () => {\n    let meals = firebase.database().ref(`users/9718920c-3246-4961-b068-bfa0336125bd`);\n    return meals.once(\"value\").then(function(snapshot) {\n        return snapshot.val();\n    });\n  };\n  \n  const useUser = () => {\n    const [user, setUser] = useState(null);\n    const loaded = useRef(false);\n    useEffect(() => {\n        if (!loaded.current) {\n        const getAndSetUser = async () => {\n                const fetchedUser = await getUser();\n                setUser(fetchedUser);\n                loaded.current = true;\n            }\n            getAndSetUser();\n        }\n    }, [])\n    return user;\n  };\n\n  export default useUser;","import React from 'react';\n// import logo from './logo.svg';\nimport '../styles/Header.css';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { Form, FormControl} from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport useUser from '../hooks/userHooks.js'\nimport { Image, DropdownButton, Dropdown} from 'react-bootstrap';\n\nfunction Header() {\n  let user = useUser();\n  const plateEditor = () => {\n    if (user.type !== \"user\") {\n      return (\n          <Nav.Link href=\"/chef\">Plate Editor</Nav.Link>\n      )\n    } else return null;\n  }\n  let link = window.location.href;\n  if (link.includes('login')) {\n    return null;\n  } else {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">\n        <Image src={require(\"../static/readyplate.png\")} alt='logo' width='90px' height='60px'/>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          {/* {plateEditor} */}\n          <Nav.Link href=\"/chef\">Plate Editor</Nav.Link>\n        </Nav>\n        <DropdownButton variant=\"secondary\" id=\"dropdown-basic-button\" title=\"Information\">\n          <Dropdown.Item disabled='true'>\n            <Image src={require(\"../static/profilepic.png\")} width='50px' height='50px' alt='pf'/>\n          </Dropdown.Item>\n          <Dropdown.Item href=\"/profile\">Profile</Dropdown.Item>\n          <Dropdown.Item href=\"/login\">Logout</Dropdown.Item>\n        </DropdownButton>\n      </Navbar.Collapse>\n    </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/DayCard.css';\nimport { Card, Dropdown, DropdownButton, Accordion, ListGroup, Jumbotron, Button} from 'react-bootstrap';\nimport firebase from \"firebase/app\";\n\nlet getMeals = async (cardGroup, cardDate) => {\n    let meals = firebase.database().ref(`group/${cardGroup}/date/${cardDate}`);\n    return meals.once(\"value\").then(function(snapshot) {\n        return snapshot.val();\n    });\n};\n\nconst useMeals = (cardGroup, cardDate) => {\n    const [meals, setMeals] = useState(null);\n    const loaded = useRef(false);\n    useEffect(() => {\n        if (!loaded.current) {\n        const getAndSetMeals = async () => {\n                const fetchedMeals = await getMeals(cardGroup, cardDate);\n                setMeals(fetchedMeals)\n                loaded.current = true;\n            }\n            getAndSetMeals();\n        }\n    }, [])\n    return meals;\n}\n\nlet DayCard = ({\n    cardGroup,\n    cardDate,\n}) => {\n    const meals = useMeals(cardGroup, cardDate);\n    if (!meals) {\n        return (\n            <Card>\n                <Card.Body>\n                    <Card.Title className=\"text-center\">\n                            {new Date(cardDate.split('-')[0], cardDate.split('-')[1]-1, cardDate.split('-')[2]).toDateString()}\n                    </Card.Title>\n                    <Card.Text>\n                        <Jumbotron>\n                            <h1>No Plate Planned!</h1>\n                            <p>\n                                Contact your chef for more information. Sorry!\n                            </p>\n                            <p>\n                                <Button variant=\"info\">Contact Chef</Button>\n                            </p>\n                        </Jumbotron>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n    console.log(meals)\n    let eventkey = \"0\";\n    return (\n        // <Card style={{ width: '20rem' }}>\n        <Card>\n            <Card.Body>\n                <Card.Title className=\"text-center\">\n                        {new Date(cardDate.split('-')[0], cardDate.split('-')[1], cardDate.split('-')[2]).toDateString()}\n                </Card.Title>\n                <Card.Text>\n                    <Accordion>\n                        {Object.entries(meals).map(meal => (\n                            <Card>\n                                <Accordion.Toggle className=\"text-center pointer\" as={Card.Header} eventKey={eventkey}>\n                                    {meal[0]}\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey={eventkey}>\n                                <Card.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {meal[1].map(item => (\n                                            <ListGroup.Item class=\"food-item\">{item}</ListGroup.Item>\n                                        ))}\n                                        <p hidden>\n                                            {eventkey = parseInt(eventkey)}\n                                            {eventkey ++}\n                                            {eventkey = eventkey.toString()}\n                                        </p>\n                                    </ListGroup>\n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                        ))}\n                    </Accordion>\n                </Card.Text>\n                <div class='text-center'>\n                    <DropdownButton id=\"dropdown-basic-button\" title=\"Meal Options\" class='center'>\n                        <Dropdown.Item href=\"#/action-1\">Rate Meal</Dropdown.Item>\n                        <Dropdown.Item href=\"#/action-2\">Request Late Plate</Dropdown.Item>\n                        <Dropdown.Item href=\"#/action-3\">Message Chef</Dropdown.Item>\n                    </DropdownButton>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default DayCard;","import React from 'react';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport '../styles/WeekPicker.css';\n\nlet date = new Date();\n\nlet WeekPicker = () => {\n    return (\n        <div>\n            <DateRangePicker initialSettings={{ startDate: (date.getMonth()+1) + '/'+ date.getDate() +'/' + date.getFullYear()}}>\n                <button class=\"material-button\"type=\"button\"><span>Pick Dates</span></button>\n            </DateRangePicker>\n        </div>\n    );\n}\n\nexport default WeekPicker;","import React, { useState, useRef, useEffect } from 'react';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport '../styles/index.css';\nimport Header from './Header';\nimport DayCard from './DayCard';\nimport WeekPicker from './WeekPicker';\nimport { dates, group } from '../stores.js';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nimport useUser from '../hooks/userHooks.js'\n// TO-DO remove this line once pulled from db\n// let cardGroup = group;\n\nlet getDates = async (cardUser) => {\n  if(cardUser) {\n      let meals = firebase.database().ref(`group/${cardUser.group}/date`);\n      return meals.once(\"value\").then(function(snapshot) {\n          console.log(snapshot.val());\n          return snapshot.val();\n      });\n  } else {\n    return null;\n  }\n};\n\nconst useDates = (cardUser) => {\n  const [dates, setDates] = useState(null);\n  const loaded = useRef(false);\n  useEffect(() => {\n      if (!loaded.current && cardUser) {\n      const getAndSetDate = async () => {\n              const fetchedDates = await getDates(cardUser);\n              setDates(fetchedDates);\n              loaded.current = true;\n          }\n          getAndSetDate();\n      }\n  }, [cardUser])\n  console.log(dates);\n  return dates;\n}\n\n\n\nlet User = () => {\n  const cardUser = useUser();\n  const cardDates = useDates(cardUser);\n  if(!cardUser || !cardDates) {\n    return null;\n  } else {\n    console.log(\"user:\")\n    console.log(cardUser);\n    console.log(\"dates:\")\n    console.log(Object.keys(cardDates));\n    return (  \n      <div>\n        <Container>\n          <Row>\n            <Col xl>\n              <WeekPicker></WeekPicker>\n              {/* <div><br/><br/><br/></div> */}\n            </Col>\n          </Row>\n          <Row>\n            {Object.keys(cardDates).map(cardDate => (\n              <Col sm>\n                <DayCard cardDate={cardDate} cardGroup={cardUser.group} />\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </div>\n      )\n  }\n};\n\nexport default User;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Container, Row, Col, Card, Form, Dropdown, DropdownButton, Button, ButtonGroup} from 'react-bootstrap';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nimport '../styles/Chef.css'\nimport useUser from '../hooks/userHooks.js'\n\n\nconst MealForm = () => {\n    const user = useUser();\n    const [formValues, setFormValues] = useState({});\n    const updateFormValues = (updateObject) => {\n        setFormValues({\n            ...formValues,\n            ...updateObject\n        });\n    };\n\n    const [mealEntryCount, setMealEntryCount] = useState(1);\n    const addOneMealEntry = () => setMealEntryCount(mealEntryCount + 1);\n    const deleteOneMealEntry = () => {\n        updateFormValues({\n            [mealEntryCount - 1]: null\n        })\n        setMealEntryCount(mealEntryCount >1 ? mealEntryCount - 1 : mealEntryCount)\n    };\n\n    const getHandleFieldChange = (index) => (event) => {\n        const fieldIndex = index;\n        const newValue = event.target.value;\n        updateFormValues({\n            [fieldIndex]: newValue,\n        })\n    }\n    const mealFormItems = (new Array(mealEntryCount)).fill(0).map((item, index) => (\n        <Form.Group controlId={`mealForm.mealItem${index + 1}`}>\n            <Form.Label>Item #{(index+1).toString()}</Form.Label>\n            <Form.Control placeholder=\"Lasagna\" onChange={getHandleFieldChange(index)}/>\n        </Form.Group>\n    ))\n    const handleFormSubmit = () => {\n        const cleanedValues = {};\n        for (let item of Object.keys(formValues)) {\n            if (formValues[item] !== null) {\n                cleanedValues[item] = formValues[item];\n            }\n        }\n        console.log(\"Form Values:\")\n        console.log(cleanedValues);\n        writeMealData(cleanedValues);\n    }\n\n    function writeMealData(formInput) {\n        let foodItems = {};\n        for (let item of Object.keys(formInput)) {\n            if (item !== \"name\" && item !== \"date\") {\n                foodItems[item] = formInput[item];\n            }\n        }\n        console.log(\"Food Items:\")\n        console.log(foodItems);\n        firebase.database().ref(`group/${user.group}/date/${formInput.date}/${formInput.name}`).set(foodItems);\n    }\n\n\n    return (\n        <div>\n            <Form id=\"meal-editor\">\n                <Form.Group controlId=\"mealForm.mealName\">\n                    <Form.Label>Meal Name</Form.Label>\n                    <Form.Control placeholder=\"Dinner\" onChange={getHandleFieldChange('name')}/>\n                </Form.Group>\n                <Form.Group controlId=\"mealForm.mealDate\">\n                    <Form.Label>Meal Date</Form.Label>\n                    <Form.Control placeholder=\"YYYY-MM-DD\" onChange={getHandleFieldChange('date')}/>\n                    <Form.Text id=\"dateHelpBlock\" muted>\n                        All dates must be in the form YYYY-MM-DD. Don't forget your slashes!\n                    </Form.Text>\n                </Form.Group>\n                {mealFormItems}\n            </Form>\n            <ButtonGroup>\n                <Button variant=\"primary\" onClick={addOneMealEntry}>\n                    Add an Item\n                </Button>\n                <Button variant=\"danger\" onClick={deleteOneMealEntry}>\n                    Delete an Item\n                </Button>\n            </ButtonGroup>\n            <div><br/></div>\n            <Button variant=\"light\" size=\"lg\" block onClick={() => {handleFormSubmit(); window.location.reload()}}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n\nexport default MealForm;","import React, { useEffect, useRef, useState } from 'react';\nimport { Container, Row, Col, Card,Button, ButtonGroup} from 'react-bootstrap';\nimport '../styles/Chef.css'\nimport MealForm from './MealForm.js'\n\nconst Chef = () => {\n    const [mealCreation, setMealCreation] = useState(false);\n    const addMealCreation = () => setMealCreation(!mealCreation);\n    const mealFormItems = mealCreation ?\n             (\n                <Card>\n                    <Card.Body>\n                        <Card.Title className=\"text-center\">\n                            Plan your meal!\n                        </Card.Title>\n                    </Card.Body>\n                    <Card.Body>\n                        <MealForm/>\n                    </Card.Body>\n                </Card>\n            ) : null\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col>\n                        <div><br/><br/></div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                            <Button variant=\"primary\" size=\"large\" block onClick={addMealCreation}>\n                                Add a Plate\n                            </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div><br/><br/></div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col style={{display: 'flex', justifyContent: 'center'}}>\n                        {mealFormItems}\n                    </Col>\n                </Row>\n            </Container>\n      </div>\n    );\n}\n\nexport default Chef;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Image from 'react-bootstrap/Image';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\n\nfunction Login () {\n    return (\n        <div height='100vh'>\n            <Container fluid style={{height:'100vh'}}>\n                <Row s={2} >\n                    <Col xs={8} style={{backgroundColor: '#f47373', justifyContent:'center'}}>\n                        <div style={{height:'100vh',marginTop: '5%'}}>\n                            <Image style={{ flex:1, \n                                        height: undefined, \n                                        width: undefined,\n                                        }} src={require(\"../static/readyplate.png\")} fluid />\n                        </div>\n                    </Col>\n                    <Col style={{backgroundColor:'skyblue'}}>\n                            <h1 style={{paddingTop:'50%'}}>\n                                welcome 2 readyPlate\n                            </h1>\n                            <Form style={{paddingTop:'5%'}}>\n                                <Form.Group controlId=\"formUsername\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control type=\"username\" placeholder=\"Enter Username\" />\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control type=\"password\" placeholder=\"Password\" />\n                                </Form.Group>\n                                <Button style={{marginTop:'5%'}} block>\n                                        Submit\n                                </Button>\n                                <p style={{marginTop:'10%'}}>\n                                    Don't have an account yet?\n                                </p>\n                                <Button block>\n                                    Sign Up\n                                </Button>\n                            </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport Button from 'react-bootstrap/Button'\n\n\nfunction SignUp () {\n    return (\n        <div>\n            <h1>\n                SIGN UP!\n            </h1>\n            <Button style={{padding:'50px'}}>\n                SIGN UP!\n            </Button>\n        </div>\n        \n    );\n}\n\nexport default SignUp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport User from './components/User';\nimport Header from './components/Header';\nimport Chef from './components/Chef'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { firebaseConfig} from './stores.js';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nfirebase.initializeApp(firebaseConfig);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <Router>\n      <Switch>\n        <Route path=\"/profile\">\n          {/* Route to About ?? */}\n        </Route>\n        <Route path=\"/login\">\n          <Login/>\n        </Route>\n        <Route path=\"/signup\">\n          <SignUp/>\n        </Route>\n        <Route path=\"/chef\">\n          <Chef/>\n        </Route>\n        <Route path=\"/\">\n          <User/>\n        </Route>\n       \n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyCA5DXoPJE6ilKLonGFQhEyetjip1jzUEM\",\n  authDomain: \"mealscheduler-aedc6.firebaseapp.com\",\n  databaseURL: \"https://mealscheduler-aedc6.firebaseio.com\",\n  projectId: \"mealscheduler-aedc6\",\n  storageBucket: \"mealscheduler-aedc6.appspot.com\",\n  messagingSenderId: \"520867095650\",\n  appId: \"1:520867095650:web:cd87edb3236614db3e1d3b\",\n  measurementId: \"G-2P49DVCNRV\"\n};\n\nexport let dates = [\"2020-10-12\", \"2020-10-13\"];\nexport let group = \"SigChiUNC\";\n","module.exports = __webpack_public_path__ + \"static/media/readyplate.de154ee3.png\";","module.exports = __webpack_public_path__ + \"static/media/profilepic.9acfe78b.png\";"],"sourceRoot":""}